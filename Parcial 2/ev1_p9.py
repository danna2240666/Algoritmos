# -*- coding: utf-8 -*-
"""Ev1_p9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j4rHoEAxhkTAnmx_klCbuGwEAQ9NS7pS
"""

print("""Para este programa se debe escribir primero el numero de la carta seguido de su palo, separados por un espacio
Los palos se escribiran como: picas(P), diamantes(D), treboles(T), corazones(C)
La información de cada carta tambien seran separados por un espacio, de la forma:
Q P 9 T 2 P 6 C
Para terminar ingrese 0""")
def valor_carta(val):
    #convierte letra a numero
    if val == 'J':
        return 11
    if val == 'Q':
        return 12
    if val == 'K':
        return 13
    if val == 'A':
        return 14
    return int(val)

def repr_carta(valor):
    #convierte numero a letra
    if valor == 11:
        return 'J'
    if valor == 12:
        return 'Q'
    if valor == 13:
        return 'K'
    if valor == 14:
        return 'A'
    return str(valor)

while True:
    baraja = input("Por favor ingrese una mano de 4 cartas: ").split(" ")
    if baraja[0] == '0':
        break

    cartas = []
    for i in range(0, len(baraja), 2):
        v = baraja[i]
        p = baraja[i + 1]
        cartas.append((valor_carta(v), p))

    #agrupar cartas por palo
    por_palo = {}
    for v, p in cartas:
        if p not in por_palo:
            por_palo[p] = []
        por_palo[p].append(v)

    mejor_carta = None  #para guardar numero y palo

    for palo, valores in por_palo.items():
        uniq = sorted(set(valores))
        for nuevo in range(2, 15):
            if nuevo in uniq:
                continue
            cand = sorted(uniq + [nuevo])
            #si son 5 consecutivos, la escalera es válida
            if len(cand) == 5 and cand[-1] - cand[0] == 4:
                extremo = cand[-1]
                if (mejor_carta is None) or (extremo > mejor_carta[0]):
                    mejor_carta = (nuevo, palo)

    if mejor_carta is None: #si no se hallo la posiblidad de escalera: nada
        print("NADA")
    else:
        v, p = mejor_carta
        print(f"{repr_carta(v)} {p}") #repr_carta en caso de que necesitemos letra